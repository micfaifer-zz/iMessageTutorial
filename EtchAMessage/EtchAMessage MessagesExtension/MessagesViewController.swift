//
//  MessagesViewController.swift
//  EtchAMessage MessagesExtension
//
//  Created by Piera Marchesini on 05/02/18.
//  Copyright Â© 2018 Piera Marchesini. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
    
    var conversation: MSConversation?
    let compactStoryboardIdentifier = "compact"
    let expandedStoryboardIdentifier = "expanded"
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    }
    
    
    
    // MARK: - Conversation Handling
    override func willBecomeActive(with conversation: MSConversation) {
        self.conversation = conversation
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
    
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
        
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        if let aConversation = self.conversation {
            presentViewController(conversation: aConversation, presentationStyle: presentationStyle)
        }
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
        
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
    
    //MARK: - Action
    @IBAction func startButtonPressed(_ sender: Any) {
        requestPresentationStyle(.expanded)
    }
    
    //MARK: - Draw ViewController
    func presentViewController(conversation: MSConversation, presentationStyle: MSMessagesAppPresentationStyle){
        var controller: UIViewController
        if presentationStyle == .compact {
            controller = instantiateCompactViewController()
        } else {
            controller = instantiateExpandedViewController()
        }
        
        addChildViewController(controller)
        view.addSubview(controller.view)
        
        controller.view.frame = view.bounds
//        controller.view.translatesAutoresizingMaskIntoConstraints = false
//        view.addSubview(controller.view)
//        controller.view.leftAnchor.constraint(equalTo: view.leftAnchor).isActive = true
//        controller.view.rightAnchor.constraint(equalTo: view.rightAnchor).isActive = true
//        controller.view.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
        controller.view.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
        
        controller.didMove(toParentViewController: self)
    }
    
    func instantiateExpandedViewController() -> UIViewController {
        if let expandedViewController = storyboard?.instantiateViewController(withIdentifier: expandedStoryboardIdentifier) {
            return expandedViewController
        } else { return UIViewController() }
    }
    
    func instantiateCompactViewController() -> UIViewController {
        if let compactViewController = storyboard?.instantiateViewController(withIdentifier: compactStoryboardIdentifier) {
            return compactViewController
        } else { return UIViewController() }
    }
}
