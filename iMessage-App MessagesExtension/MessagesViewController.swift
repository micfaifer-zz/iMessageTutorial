//
//  MessagesViewController.swift
//  iMessage-App MessagesExtension
//
//  Created by Michelle Faifer dos Santos on 31/01/18.
//  Copyright Â© 2018 Michelle Faifer dos Santos. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
    //MARK: - Attributes
    var session: MSSession?
    
    var conversation: MSConversation?
    var compactStoryboardIdentifier = "compact"
    var extendedStoryboardIdentifier = "extended"
    
    //MARK: - Outlet
    @IBAction func botao(_ sender: Any) {
        if session == nil {
            session = MSSession()
        }
        
        let message = MSMessage(session: session!)
        
        let layout = MSMessageTemplateLayout()
        
        layout.caption = "silvao"
        message.layout = layout
        conversation?.insert(message, completionHandler: nil)
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        // Do any additional setup after loading the view.
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        self.conversation = conversation
        
        if let selected = conversation.selectedMessage {
            session = selected.session
        }
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        guard let thisConversation = self.conversation else {
            return
        }
        
        presentViewController(conversation: thisConversation, presentationStyle: presentationStyle);
    }
    
    func presentViewController(conversation: MSConversation, presentationStyle: MSMessagesAppPresentationStyle){
        var vc: UIViewController
        
        if presentationStyle == .compact {
            vc = instantiateCompactViewController()
        } else {
            vc = instantiateExpandedViewController()
        }
        
        addChildViewController(vc)
        
        // ...constraints and view setup...
        
        view.addSubview(vc.view)
        vc.didMove(toParentViewController: self)
    }
    
    func instantiateCompactViewController() -> UIViewController{
        guard let compactViewController = storyboard?.instantiateViewController(withIdentifier: compactStoryboardIdentifier) else {
            fatalError("Can't instantiate CompactViewController")
        }
        
        return compactViewController
    }
    
    func instantiateExpandedViewController() -> UIViewController {
        
        guard let compactViewController = storyboard?.instantiateViewController(withIdentifier: extendedStoryboardIdentifier) else {
            fatalError("Can't instantiate CompactViewController")
        }
        
        return compactViewController
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

}
